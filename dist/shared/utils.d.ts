/// <reference types="node" />
export declare const toPromise: <T>(data: T) => Promise<T>;
export declare const getDbConnectionOptions: (connectionName?: string) => Promise<{
    name: string;
    type: "cockroachdb";
    schema?: string;
    replication?: {
        readonly master: import("typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions").CockroachConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions").CockroachConnectionCredentialsOptions[];
    };
    poolErrorHandler?: (err: any) => any;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    ssl?: boolean | import("tls").TlsOptions;
} | {
    name: string;
    type: "mysql" | "mariadb";
    charset?: string;
    timezone?: string;
    connectTimeout?: number;
    acquireTimeout?: number;
    insecureAuth?: boolean;
    supportBigNumbers?: boolean;
    bigNumberStrings?: boolean;
    dateStrings?: boolean | string[];
    debug?: boolean | string[];
    trace?: boolean;
    multipleStatements?: boolean;
    legacySpatialSupport?: boolean;
    flags?: string[];
    replication?: {
        readonly master: import("typeorm/driver/mysql/MysqlConnectionCredentialsOptions").MysqlConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/mysql/MysqlConnectionCredentialsOptions").MysqlConnectionCredentialsOptions[];
        readonly canRetry?: boolean;
        readonly removeNodeErrorCount?: number;
        readonly restoreNodeTimeout?: number;
        readonly selector?: "RR" | "RANDOM" | "ORDER";
    };
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    ssl?: any;
} | {
    name: string;
    type: "postgres";
    schema?: string;
    replication?: {
        readonly master: import("typeorm/driver/postgres/PostgresConnectionCredentialsOptions").PostgresConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/postgres/PostgresConnectionCredentialsOptions").PostgresConnectionCredentialsOptions[];
    };
    uuidExtension?: "pgcrypto" | "uuid-ossp";
    poolErrorHandler?: (err: any) => any;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string | (() => string) | (() => Promise<string>);
    database?: string;
    ssl?: boolean | import("tls").TlsOptions;
} | {
    name: string;
    type: "sqlite";
    database: string;
    key?: string;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "mssql";
    connectionTimeout?: number;
    requestTimeout?: number;
    stream?: boolean;
    schema?: string;
    pool?: {
        readonly max?: number;
        readonly min?: number;
        readonly maxWaitingClients?: number;
        readonly testOnBorrow?: boolean;
        readonly acquireTimeoutMillis?: number;
        readonly fifo?: boolean;
        readonly priorityRange?: number;
        readonly autostart?: number;
        readonly evictionRunIntervalMillis?: number;
        readonly numTestsPerRun?: number;
        readonly softIdleTimeoutMillis?: number;
        readonly idleTimeoutMillis?: number;
        readonly errorHandler?: (err: any) => any;
    };
    options?: {
        readonly fallbackToDefaultDb?: boolean;
        readonly enableAnsiNullDefault?: boolean;
        readonly connectTimeout?: number;
        readonly cancelTimeout?: number;
        readonly packetSize?: number;
        readonly useUTC?: boolean;
        readonly abortTransactionOnError?: boolean;
        readonly localAddress?: string;
        readonly useColumnNames?: boolean;
        readonly camelCaseColumns?: boolean;
        readonly disableOutputReturning?: boolean;
        readonly debug?: {
            readonly packet?: boolean;
            readonly data?: boolean;
            readonly payload?: boolean;
            readonly token?: boolean;
        };
        readonly isolation?: "SERIALIZABLE" | "READ_UNCOMMITTED" | "READ_COMMITTED" | "REPEATABLE_READ" | "SNAPSHOT";
        readonly connectionIsolationLevel?: "SERIALIZABLE" | "READ_UNCOMMITTED" | "READ_COMMITTED" | "REPEATABLE_READ" | "SNAPSHOT";
        readonly readOnlyIntent?: boolean;
        readonly encrypt?: boolean;
        readonly cryptoCredentialsDetails?: any;
        readonly rowCollectionOnDone?: boolean;
        readonly rowCollectionOnRequestCompletion?: boolean;
        readonly tdsVersion?: string;
        readonly enableArithAbort?: boolean;
    };
    replication?: {
        readonly master: import("typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions").SqlServerConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions").SqlServerConnectionCredentialsOptions[];
    };
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    domain?: string;
} | {
    name: string;
    type: "oracle";
    schema?: string;
    replication?: {
        readonly master: import("typeorm/driver/oracle/OracleConnectionCredentialsOptions").OracleConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/oracle/OracleConnectionCredentialsOptions").OracleConnectionCredentialsOptions[];
    };
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    sid?: string;
    connectString?: string;
} | {
    name: string;
    type: "mongodb";
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    poolSize?: number;
    ssl?: boolean;
    sslValidate?: boolean;
    sslCA?: string[] | Buffer[];
    sslCert?: string | Buffer;
    sslKey?: string;
    sslPass?: string | Buffer;
    sslCRL?: string | Buffer;
    autoReconnect?: boolean;
    noDelay?: boolean;
    keepAlive?: number;
    connectTimeoutMS?: number;
    family?: number;
    socketTimeoutMS?: number;
    reconnectTries?: number;
    reconnectInterval?: number;
    ha?: boolean;
    haInterval?: number;
    replicaSet?: string;
    acceptableLatencyMS?: number;
    secondaryAcceptableLatencyMS?: number;
    connectWithNoPrimary?: boolean;
    authSource?: string;
    w?: string | number;
    wtimeout?: number;
    j?: boolean;
    forceServerObjectId?: boolean;
    serializeFunctions?: boolean;
    ignoreUndefined?: boolean;
    raw?: boolean;
    promoteLongs?: boolean;
    promoteBuffers?: boolean;
    promoteValues?: boolean;
    domainsEnabled?: boolean;
    bufferMaxEntries?: number;
    readPreference?: string | import("typeorm").ReadPreference;
    pkFactory?: any;
    promiseLibrary?: any;
    readConcern?: any;
    maxStalenessSeconds?: number;
    loggerLevel?: "error" | "warn" | "debug" | "info";
    checkServerIdentity?: boolean | Function;
    validateOptions?: any;
    appname?: string;
    authMechanism?: string;
    compression?: any;
    fsync?: boolean;
    readPreferenceTags?: any[];
    numberOfRetries?: number;
    auto_reconnect?: boolean;
    monitorCommands?: boolean;
    minSize?: number;
    useNewUrlParser?: boolean;
    useUnifiedTopology?: boolean;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "cordova";
    database: string;
    location: string;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "sqljs";
    database?: Uint8Array;
    sqlJsConfig?: any;
    autoSave?: boolean;
    autoSaveCallback?: Function;
    location?: string;
    useLocalForage?: boolean;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "react-native";
    database: string;
    location: string;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "nativescript";
    database: string;
    driver: any;
    readOnly?: boolean;
    key?: string;
    multithreading?: boolean;
    migrate?: boolean;
    iosFlags?: number;
    androidFlags?: number;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "expo";
    database: string;
    driver: any;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
} | {
    name: string;
    type: "aurora-data-api";
    region: string;
    secretArn: string;
    resourceArn: string;
    database: string;
    serviceConfigOptions?: {
        [key: string]: any;
    };
    legacySpatialSupport?: boolean;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    ssl?: any;
} | {
    name: string;
    type: "sap";
    schema?: string;
    pool?: {
        readonly max?: number;
        readonly min?: number;
        readonly maxWaitingRequests?: number;
        readonly requestTimeout?: number;
        readonly checkInterval?: number;
        readonly idleTimeout?: number;
        readonly poolErrorHandler?: (err: any) => any;
    };
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    encrypt?: boolean;
    sslValidateCertificate?: boolean;
    key?: string;
    cert?: string;
    ca?: string;
} | {
    name: string;
    type: "aurora-data-api-pg";
    region: string;
    secretArn: string;
    resourceArn: string;
    database: string;
    uuidExtension?: "pgcrypto" | "uuid-ossp";
    poolErrorHandler?: (err: any) => any;
    entities?: (string | Function | import("typeorm").EntitySchema<any>)[];
    subscribers?: (string | Function)[];
    migrations?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm/logger/LoggerOptions").LoggerOptions;
    logger?: "debug" | import("typeorm").Logger | "advanced-console" | "simple-console" | "file";
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    cli?: {
        readonly entitiesDir?: string;
        readonly migrationsDir?: string;
        readonly subscribersDir?: string;
    };
}>;
export declare const getDbConnection: (connectionName?: string) => Promise<import("typeorm").Connection>;
export declare const runDbMigrations: (connectionName?: string) => Promise<void>;
export declare const comparePasswords: (userPassword: any, currentPassword: any) => Promise<any>;
